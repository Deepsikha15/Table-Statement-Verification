<document>
 <table id="Table 1">
  <caption text="

   Matrix types in
   
    Dune-ISTL
   
   , the first three matrix types cannot be used as a block matrices.
  
">
  </caption>
  <row row="0">
   <cell col-end="0" col-start="0" row-end="0" row-start="0" text="Class">
   </cell>
   <cell col-end="1" col-start="1" row-end="0" row-start="0" text="Implements">
   </cell>
  </row>
  <row row="1">
   <cell col-end="0" col-start="0" row-end="1" row-start="1" text="FieldMatrix">
   </cell>
   <cell col-end="1" col-start="1" row-end="1" row-start="1" text="(small) matrix with size known at compile time">
   </cell>
  </row>
  <row row="2">
   <cell col-end="0" col-start="0" row-end="2" row-start="2" text="DiagonalMatrix">
   </cell>
   <cell col-end="1" col-start="1" row-end="2" row-start="2" text="Storage optimal representation of a diagonal matrix with size known at compile time">
   </cell>
  </row>
  <row row="3">
   <cell col-end="0" col-start="0" row-end="3" row-start="3" text="ScaledIdentityMatrix">
   </cell>
   <cell col-end="1" col-start="1" row-end="3" row-start="3" text="Storage optimal representation of a scaled identity matrix with size known at compile time">
   </cell>
  </row>
  <row row="4">
   <cell col-end="0" col-start="0" row-end="4" row-start="4" text="BCRSMatrix">
   </cell>
   <cell col-end="1" col-start="1" row-end="4" row-start="4" text="(block) compressed row storage matrix">
   </cell>
  </row>
  <row row="5">
   <cell col-end="0" col-start="0" row-end="5" row-start="5" text="BDMatrix">
   </cell>
   <cell col-end="1" col-start="1" row-end="5" row-start="5" text="(block) diagonal matrix">
   </cell>
  </row>
  <row row="6">
   <cell col-end="0" col-start="0" row-end="6" row-start="6" text="BTDMatrix">
   </cell>
   <cell col-end="1" col-start="1" row-end="6" row-start="6" text="(block) tri-diagonal matrix">
   </cell>
  </row>
  <row row="7">
   <cell col-end="0" col-start="0" row-end="7" row-start="7" text="Matrix">
   </cell>
   <cell col-end="1" col-start="1" row-end="7" row-start="7" text="Generic dynamic dense (block) matrix">
   </cell>
  </row>
  <row row="8">
   <cell col-end="0" col-start="0" row-end="8" row-start="8" text="MultiTypeBlockMatrix">
   </cell>
   <cell col-end="1" col-start="1" row-end="8" row-start="8" text="Dense block matrix with differing block type known at compile time">
   </cell>
  </row>
  <statements>
   <statement id="0" text="BDMatrix and BTDMatrix are diagonal matrix." type="entailed">
   </statement>
   <statement id="1" text="BDMatrix and BTDMatrix are not diagonal matrix." type="refuted">
   </statement>
   <statement id="2" text="Diagonal matrix, scaled identity matrix and multi type block matrix has compile time." type="entailed">
   </statement>
   <statement id="3" text="Every matrix has same implements." type="refuted">
   </statement>
   <statement id="6" text="There are eight types of matrix given in the table." type="entailed">
   </statement>
  </statements>
 </table>
 <table id="Table 2">
  <caption text="

   Vector types in
   
    Dune-ISTL
   
   , the first vector type cannot be used as a block vector.
  
">
  </caption>
  <row row="0">
   <cell col-end="0" col-start="0" row-end="0" row-start="0" text="Class">
   </cell>
   <cell col-end="1" col-start="1" row-end="0" row-start="0" text="Implements">
   </cell>
  </row>
  <row row="1">
   <cell col-end="0" col-start="0" row-end="1" row-start="1" text="FieldVector">
   </cell>
   <cell col-end="1" col-start="1" row-end="1" row-start="1" text="(small) vector with size known at compile time">
   </cell>
  </row>
  <row row="2">
   <cell col-end="0" col-start="0" row-end="2" row-start="2" text="BVector">
   </cell>
   <cell col-end="1" col-start="1" row-end="2" row-start="2" text="(block) vector, blocks have same size">
   </cell>
  </row>
  <row row="3">
   <cell col-end="0" col-start="0" row-end="3" row-start="3" text="VariableBlockVector">
   </cell>
   <cell col-end="1" col-start="1" row-end="3" row-start="3" text="Block vector where each block may vary in size">
   </cell>
  </row>
  <row row="4">
   <cell col-end="0" col-start="0" row-end="4" row-start="4" text="MultiTypeBlockVector">
   </cell>
   <cell col-end="1" col-start="1" row-end="4" row-start="4" text="Block vector with differing block type known at compile time">
   </cell>
  </row>
  <statements>
   <statement id="0" text="Class and Implements are exactly same." type="refuted">
   </statement>
   <statement id="2" text="The class for (small) vector with size known at compile time Implement is BVector." type="refuted">
   </statement>
   <statement id="3" text="The class for (small) vector with size known at compile time Implement is FieldVector." type="entailed">
   </statement>
   <statement id="5" text="There are four types of class given." type="entailed">
   </statement>
   <statement id="6" text="There are fourteen types of class given." type="refuted">
   </statement>
  </statements>
 </table>
 <table id="Table 3">
  <caption text="

   Preconditioners in
   
    Dune-ISTL
   
   .
  
">
  </caption>
  <row row="0">
   <cell col-end="0" col-start="0" row-end="0" row-start="0" text="Class">
   </cell>
   <cell col-end="1" col-start="1" row-end="0" row-start="0" text="Implements">
   </cell>
   <cell col-end="2" col-start="2" row-end="0" row-start="0" text="s/p">
   </cell>
   <cell col-end="3" col-start="3" row-end="0" row-start="0" text="Recursive">
   </cell>
  </row>
  <row row="1">
   <cell col-end="0" col-start="0" row-end="1" row-start="1" text="Richardson">
   </cell>
   <cell col-end="1" col-start="1" row-end="1" row-start="1" text="Richardson (multiplicate with a scalar)">
   </cell>
   <cell col-end="2" col-start="2" row-end="1" row-start="1" text="s">
   </cell>
   <cell col-end="3" col-start="3" row-end="1" row-start="1" text="No">
   </cell>
  </row>
  <row row="2">
   <cell col-end="0" col-start="0" row-end="2" row-start="2" text="SeqJac">
   </cell>
   <cell col-end="1" col-start="1" row-end="2" row-start="2" text="Jacobi method">
   </cell>
   <cell col-end="2" col-start="2" row-end="2" row-start="2" text="s">
   </cell>
   <cell col-end="3" col-start="3" row-end="2" row-start="2" text="Yes">
   </cell>
  </row>
  <row row="3">
   <cell col-end="0" col-start="0" row-end="3" row-start="3" text="SeqSOR">
   </cell>
   <cell col-end="1" col-start="1" row-end="3" row-start="3" text="Successive overrelaxation (SOR)">
   </cell>
   <cell col-end="2" col-start="2" row-end="3" row-start="3" text="s">
   </cell>
   <cell col-end="3" col-start="3" row-end="3" row-start="3" text="Yes">
   </cell>
  </row>
  <row row="4">
   <cell col-end="0" col-start="0" row-end="4" row-start="4" text="SeqSSOR">
   </cell>
   <cell col-end="1" col-start="1" row-end="4" row-start="4" text="Symmetric SOR">
   </cell>
   <cell col-end="2" col-start="2" row-end="4" row-start="4" text="s">
   </cell>
   <cell col-end="3" col-start="3" row-end="4" row-start="4" text="Yes">
   </cell>
  </row>
  <row row="5">
   <cell col-end="0" col-start="0" row-end="5" row-start="5" text="SeqOverlappingSchwarz">
   </cell>
   <cell col-end="1" col-start="1" row-end="5" row-start="5" text="Overlapping Schwarz for arbitrary subdomains">
   </cell>
   <cell col-end="2" col-start="2" row-end="5" row-start="5" text="s">
   </cell>
   <cell col-end="3" col-start="3" row-end="5" row-start="5" text="No">
   </cell>
  </row>
  <row row="6">
   <cell col-end="0" col-start="0" row-end="6" row-start="6" text="SeqILU">
   </cell>
   <cell col-end="1" col-start="1" row-end="6" row-start="6" text="Incomplete LU decomposition">
   </cell>
   <cell col-end="2" col-start="2" row-end="6" row-start="6" text="s">
   </cell>
   <cell col-end="3" col-start="3" row-end="6" row-start="6" text="No">
   </cell>
  </row>
  <row row="7">
   <cell col-end="0" col-start="0" row-end="7" row-start="7" text="SeqILDL">
   </cell>
   <cell col-end="1" col-start="1" row-end="7" row-start="7" text="Incomplete LDL decomposition">
   </cell>
   <cell col-end="2" col-start="2" row-end="7" row-start="7" text="s">
   </cell>
   <cell col-end="3" col-start="3" row-end="7" row-start="7" text="No">
   </cell>
  </row>
  <row row="8">
   <cell col-end="0" col-start="0" row-end="8" row-start="8" text="Pamg::AMG">
   </cell>
   <cell col-end="1" col-start="1" row-end="8" row-start="8" text="Algebraic multigrid solver based on aggregation">
   </cell>
   <cell col-end="2" col-start="2" row-end="8" row-start="8" text="s/p">
   </cell>
   <cell col-end="3" col-start="3" row-end="8" row-start="8" text="No">
   </cell>
  </row>
  <row row="9">
   <cell col-end="0" col-start="0" row-end="9" row-start="9" text="BlockPreconditioner">
   </cell>
   <cell col-end="1" col-start="1" row-end="9" row-start="9" text="Wraps sequential preconditioner to parallel hybrid one">
   </cell>
   <cell col-end="2" col-start="2" row-end="9" row-start="9" text="p">
   </cell>
   <cell col-end="3" col-start="3" row-end="9" row-start="9" text="No">
   </cell>
  </row>
  <statements>
   <statement id="0" text="A list of preconditioners provided by Dune-ISTL is in Table 3 ." type="entailed">
   </statement>
   <statement id="2" text="Pamg::AMG implements is Incomplete LDL decomposition." type="refuted">
   </statement>
   <statement id="3" text="Richardson Implements is Richardson (multiplicate with a scalar)." type="entailed">
   </statement>
   <statement id="5" text="SeqJac Implements is Jacobi method." type="entailed">
   </statement>
   <statement id="6" text="SeqOverlappingSchwarz implements is Wraps sequential preconditioner to parallel hybrid one." type="refuted">
   </statement>
   <statement id="7" text="SeqSOR Implements is Successive overrelaxation (SOR) ." type="entailed">
   </statement>
   <statement id="8" text="SeqSSOR Implements is Symmetric SOR." type="entailed">
   </statement>
   <statement id="9" text="They have 5 different class." type="refuted">
   </statement>
  </statements>
 </table>
 <table id="Table 4">
  <caption text="

   Iterative and direct solvers in
   
    Dune-ISTL
   
   . Some of these solvers can handle non-static preconditioner, i.e. the preconditioner might change from iteration to iteration.
  
">
  </caption>
  <row row="0">
   <cell col-end="0" col-start="0" row-end="0" row-start="0" text="Class">
   </cell>
   <cell col-end="1" col-start="1" row-end="0" row-start="0" text="Implements">
   </cell>
   <cell col-end="2" col-start="2" row-end="0" row-start="0" text="Direct">
   </cell>
  </row>
  <row row="1">
   <cell col-end="0" col-start="0" row-end="1" row-start="1" text="LoopSolver">
   </cell>
   <cell col-end="1" col-start="1" row-end="1" row-start="1" text="Simply applies preconditioner in each step">
   </cell>
   <cell col-end="2" col-start="2" row-end="1" row-start="1" text="No">
   </cell>
  </row>
  <row row="2">
   <cell col-end="0" col-start="0" row-end="2" row-start="2" text="GradientSolver">
   </cell>
   <cell col-end="1" col-start="1" row-end="2" row-start="2" text="Simple gradient solver">
   </cell>
   <cell col-end="2" col-start="2" row-end="2" row-start="2" text="No">
   </cell>
  </row>
  <row row="3">
   <cell col-end="0" col-start="0" row-end="3" row-start="3" text="CGSolver">
   </cell>
   <cell col-end="1" col-start="1" row-end="3" row-start="3" text="Conjugate gradient method">
   </cell>
   <cell col-end="2" col-start="2" row-end="3" row-start="3" text="No">
   </cell>
  </row>
  <row row="4">
   <cell col-end="0" col-start="0" row-end="4" row-start="4" text="BiCGSTABSolver">
   </cell>
   <cell col-end="1" col-start="1" row-end="4" row-start="4" text="Biconjugate gradient stabilized method">
   </cell>
   <cell col-end="2" col-start="2" row-end="4" row-start="4" text="No">
   </cell>
  </row>
  <row row="5">
   <cell col-end="0" col-start="0" row-end="5" row-start="5" text="MINRESSolver">
   </cell>
   <cell col-end="1" col-start="1" row-end="5" row-start="5" text="Minimal Residual method">
   </cell>
   <cell col-end="2" col-start="2" row-end="5" row-start="5" text="No">
   </cell>
  </row>
  <row row="6">
   <cell col-end="0" col-start="0" row-end="6" row-start="6" text="RestartedGMResSolver">
   </cell>
   <cell col-end="1" col-start="1" row-end="6" row-start="6" text="Restarted GMRes solver">
   </cell>
   <cell col-end="2" col-start="2" row-end="6" row-start="6" text="No">
   </cell>
  </row>
  <row row="7">
   <cell col-end="0" col-start="0" row-end="7" row-start="7" text="RestartedFlexibleGMResSolver">
   </cell>
   <cell col-end="1" col-start="1" row-end="7" row-start="7" text="Flexible restarted GMRes solver (for non-static preconditioners)">
   </cell>
   <cell col-end="2" col-start="2" row-end="7" row-start="7" text="No">
   </cell>
  </row>
  <row row="8">
   <cell col-end="0" col-start="0" row-end="8" row-start="8" text="GeneralizedPCGSolver">
   </cell>
   <cell col-end="1" col-start="1" row-end="8" row-start="8" text="Flexible conjugate gradient solver (for non-static preconditioners)">
   </cell>
   <cell col-end="2" col-start="2" row-end="8" row-start="8" text="No">
   </cell>
  </row>
  <row row="9">
   <cell col-end="0" col-start="0" row-end="9" row-start="9" text="RestartedFCGSolver">
   </cell>
   <cell col-end="1" col-start="1" row-end="9" row-start="9" text="Flexible conjugate gradient solver proposed by Notay (for non-static preconditioners)">
   </cell>
   <cell col-end="2" col-start="2" row-end="9" row-start="9" text="No">
   </cell>
  </row>
  <row row="10">
   <cell col-end="0" col-start="0" row-end="10" row-start="10" text="CompleteFCGSolver">
   </cell>
   <cell col-end="1" col-start="1" row-end="10" row-start="10" text="Flexible conjugate gradient method reusing old orthogonalizations when restarting">
   </cell>
   <cell col-end="2" col-start="2" row-end="10" row-start="10" text="No">
   </cell>
  </row>
  <row row="11">
   <cell col-end="0" col-start="0" row-end="11" row-start="11" text="SuperLU">
   </cell>
   <cell col-end="1" col-start="1" row-end="11" row-start="11" text="Wrapper for SuperLU library">
   </cell>
   <cell col-end="2" col-start="2" row-end="11" row-start="11" text="Yes">
   </cell>
  </row>
  <row row="12">
   <cell col-end="0" col-start="0" row-end="12" row-start="12" text="UMFPack">
   </cell>
   <cell col-end="1" col-start="1" row-end="12" row-start="12" text="Wrapper for UMFPack direct solver library">
   </cell>
   <cell col-end="2" col-start="2" row-end="12" row-start="12" text="Yes">
   </cell>
  </row>
  <statements>
   <statement id="0" text="All of the listed preconditioners can be used in the iterative solvers provided by Dune-ISTL ." type="entailed">
   </statement>
   <statement id="1" text="BiCGSTABSolver implements is Biconjugate gradient stabilized method." type="entailed">
   </statement>
   <statement id="3" text="CompleteFCGSolver implements is Biconjugate gradient stabilized method." type="refuted">
   </statement>
   <statement id="4" text="GeneralizedPCGSolver implements is Flexible conjugate gradient method reusing old orthogonalizations when restarting ." type="refuted">
   </statement>
   <statement id="5" text="GradientSolver implements is Simple gradient solver." type="entailed">
   </statement>
   <statement id="6" text="MINRESSolver implements is Minimal Residual method." type="entailed">
   </statement>
   <statement id="8" text="Table 4 contains a list of these together with the direct solvers." type="entailed">
   </statement>
  </statements>
 </table>
</document>